import heapq

"""Уявіть, що вам на технічному інтерв'ю дають наступну задачу,
 яку треба розв'язати за допомогою купи.

Є декілька мережевих кабелів різної довжини, їх потрібно
об'єднати по два за раз в один кабель, використовуючи 
з'єднувачі, у порядку, який призведе до найменших витрат.
Витрати на з'єднання двох кабелів дорівнюють їхній сумі 
довжин, а загальні витрати дорівнюють сумі з'єднання всіх
кабелів.

Завдання полягає в тому, щоб знайти порядок об'єднання, який
мінімізує загальні витрати."""


def minimize_cost(cables):
    # Ініціалізуємо пірамідальну чергу з довжин кабелів
    heapq.heapify(cables)

    total_cost = 0
    while len(cables) > 1:
        # Витягуємо два найменші кабелі з черги
        cable1 = heapq.heappop(cables)
        cable2 = heapq.heappop(cables)

        # Обчислюємо витрати на об'єднання і додаємо до загальних витрат
        cost = cable1 + cable2
        total_cost += cost

        # Додаємо новий кабель (з'єднаний) до черги
        heapq.heappush(cables, cost)

    return total_cost

# Приклад використання:
cable_lengths = [5, 2, 22, 6, 8, 4]
min_cost = minimize_cost(cable_lengths)
print("Мінімальні витрати:", min_cost)
